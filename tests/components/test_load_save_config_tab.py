import types  # (stub modules for dependencies)
import sys  # (access sys path)
import os  # (file operations)
import time  # (set file modification times)

sys.path.append(".")  # (allow importing src modules)

# Stub gradio components
stub = types.ModuleType("gradio")  # (create gradio module)
components = types.ModuleType("gradio.components")  # (create components module)

class DummyComp:  # (basic component stub)
    def __init__(self, *args, **kwargs):  # (store params)
        self.fn = None  # (callback placeholder)
    def change(self, fn):  # (allow change callback)
        self.fn = fn  # (store provided function)
    def click(self, fn=None, inputs=None, outputs=None):  # (simulate click binding)
        self.fn = fn  # (record click callback)

class Button(DummyComp):  # (stub for Button)
    pass  # (no extra behavior)
class File(DummyComp):  # (stub for File)
    pass  # (no extra behavior)
class Textbox(DummyComp):  # (stub for Textbox)
    pass  # (no extra behavior)
class Group:  # (context manager group)
    def __init__(self, *args, **kwargs):  # (accept any args)
        pass  # (no setup needed)
    def __enter__(self):  # (start context)
        return self  # (return self)
    def __exit__(self, exc_type, exc, tb):  # (end context)
        pass  # (no cleanup)
class Row(Group):  # (stub Row)
    pass  # (inherit behavior)
class Column(Group):  # (stub Column)
    pass  # (inherit behavior)

components.Component = DummyComp  # (assign base component)
stub.components = components  # (attach components module)
stub.Button = Button  # (expose Button class)
stub.File = File  # (expose File class)
stub.Textbox = Textbox  # (expose Textbox class)
stub.Row = Row  # (expose Row)
stub.Column = Column  # (expose Column)
stub.Group = Group  # (expose Group)
sys.modules["gradio"] = stub  # (register gradio module)
sys.modules["gradio.components"] = components  # (register components module)

# Stub browser_use and internal modules
browser_use = types.ModuleType("browser_use")  # (create main package)
browser_use.browser = types.ModuleType("browser_use.browser")  # (browser submodule)
browser_use.browser.browser = types.ModuleType("browser_use.browser.browser")  # (browser module)
browser_use.browser.context = types.ModuleType("browser_use.browser.context")  # (context module)
browser_use.agent = types.ModuleType("browser_use.agent")  # (agent module)
browser_use.agent.service = types.ModuleType("browser_use.agent.service")  # (service module)
setattr(browser_use.browser.browser, "Browser", object)  # (placeholder class)
setattr(browser_use.browser.context, "BrowserContext", object)  # (placeholder)
setattr(browser_use.agent.service, "Agent", object)  # (placeholder)
sys.modules["browser_use"] = browser_use  # (register package)
sys.modules["browser_use.browser"] = browser_use.browser  # (register submodule)
sys.modules["browser_use.browser.browser"] = browser_use.browser.browser  # (register module)
sys.modules["browser_use.browser.context"] = browser_use.browser.context  # (register module)
sys.modules["browser_use.agent"] = browser_use.agent  # (register module)
sys.modules["browser_use.agent.service"] = browser_use.agent.service  # (register module)

custom_browser = types.ModuleType("src.browser.custom_browser")  # (custom browser stub)
class CustomBrowser:  # (placeholder class)
    ...  # (empty body)
custom_browser.CustomBrowser = CustomBrowser  # (expose class)
sys.modules["src.browser.custom_browser"] = custom_browser  # (register module)

custom_context = types.ModuleType("src.browser.custom_context")  # (custom context stub)
class CustomBrowserContext:  # (placeholder class)
    ...  # (empty body)
custom_context.CustomBrowserContext = CustomBrowserContext  # (expose class)
sys.modules["src.browser.custom_context"] = custom_context  # (register module)

custom_controller = types.ModuleType("src.controller.custom_controller")  # (controller stub)
class CustomController:  # (placeholder class)
    ...  # (empty body)
custom_controller.CustomController = CustomController  # (expose class)
sys.modules["src.controller.custom_controller"] = custom_controller  # (register module)

deep_agent = types.ModuleType("src.agent.deep_research.deep_research_agent")  # (deep research stub)
class DeepResearchAgent:  # (placeholder class)
    ...  # (empty body)
deep_agent.DeepResearchAgent = DeepResearchAgent  # (expose class)
sys.modules["src.agent.deep_research.deep_research_agent"] = deep_agent  # (register module)

import tests.utils.test_llm_provider as _llm_preload  # (load llm provider early)

import importlib  # (reload utilities)
if "src.webui.webui_manager" in sys.modules:  # (ensure real module)
    del sys.modules["src.webui.webui_manager"]  # (remove any stub)
from src.webui.components import load_save_config_tab  # (import component)
from src.webui.webui_manager import WebuiManager  # (import manager)


def test_load_latest_config(tmp_path, monkeypatch):  # load most recent config file
    old = tmp_path / "old.json"  # (older config file path)
    old.write_text("{}")  # (create empty json)
    time.sleep(0.01)  # (ensure timestamp difference)
    new = tmp_path / "new.json"  # (newer config file path)
    new.write_text("{}")  # (create empty json)

    manager = WebuiManager(settings_save_dir=str(tmp_path))  # (use tmpdir for manager)

    called = {}  # (store call argument)
    def fake_load(path):  # (fake load_config generator)
        called["path"] = path  # (record path)
        yield {}  # (yield empty update)
    monkeypatch.setattr(manager, "load_config", fake_load)  # (patch load_config)

    load_save_config_tab.create_load_save_config_tab(manager)  # (invoke tab creation)

    assert called["path"] == str(new)  # (verify newest file loaded)
